From 262d3e98fdfb6f8eb576cf7c88e40b3f195532b1 Mon Sep 17 00:00:00 2001
From: larsh <larsh@unknown>
Date: Mon, 27 Jan 2014 19:50:50 +0000
Subject: [PATCH 73/73] HBASE-10371 Compaction creates empty hfile, then selects this file for compaction and creates empty hfile and over again. (binlijin)

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.96@1561811 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 846f47da022c69cbba8c17a7cce7f9f792f970d5)
---
 .../compactions/RatioBasedCompactionPolicy.java    |    6 ++-
 .../regionserver/TestDefaultCompactSelection.java  |   48 ++++++++++++++++++++
 2 files changed, 53 insertions(+), 1 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/RatioBasedCompactionPolicy.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/RatioBasedCompactionPolicy.java
index 74fa9e6..19fdbcd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/RatioBasedCompactionPolicy.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/RatioBasedCompactionPolicy.java
@@ -156,7 +156,11 @@ public class RatioBasedCompactionPolicy extends CompactionPolicy {
         expiredStoreFiles.add(storeFile);
       }
     }
-
+    if (expiredStoreFiles != null && expiredStoreFiles.size() == 1
+        && expiredStoreFiles.get(0).getReader().getEntries() == 0) {
+      // If just one empty store file, do not select for compaction.
+      return null;
+    }
     return expiredStoreFiles;
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
index 1313592..3fa84ee 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultCompactSelection.java
@@ -130,6 +130,8 @@ public class TestDefaultCompactSelection extends TestCase {
     boolean isRef = false;
     long ageInDisk;
     long sequenceid;
+    TimeRangeTracker timeRangeTracker;
+    long entryCount;
 
     MockStoreFile(long length, long ageInDisk, boolean isRef, long sequenceid) throws IOException {
       super(TEST_UTIL.getTestFileSystem(), TEST_FILE, TEST_UTIL.getConfiguration(),
@@ -159,14 +161,35 @@ public class TestDefaultCompactSelection extends TestCase {
       return this.isRef;
     }
 
+    void setTimeRangeTracker(TimeRangeTracker timeRangeTracker) {
+      this.timeRangeTracker = timeRangeTracker;
+    }
+
+    void setEntries(long entryCount) {
+      this.entryCount = entryCount;
+    }
+
     @Override
     public StoreFile.Reader getReader() {
       final long len = this.length;
+      final TimeRangeTracker timeRange = this.timeRangeTracker;
+      final long entries = this.entryCount;
       return new StoreFile.Reader() {
         @Override
         public long length() {
           return len;
         }
+
+        @Override
+        public long getMaxTimestamp() {
+          return timeRange == null ? Long.MAX_VALUE
+              : timeRange.maximumTimestamp;
+        }
+
+        @Override
+        public long getEntries() {
+          return entries;
+        }
       };
     }
 
@@ -359,4 +382,29 @@ public class TestDefaultCompactSelection extends TestCase {
     // Prefer later compaction if the benefit is significant.
     compactEquals(sfCreate(99,99,99,99, 27,27,27,20,20,20), 20, 20, 20);
   }
+
+  public void testCompactionEmptyHFile() throws IOException {
+    // Set TTL
+    ScanInfo oldScanInfo = store.getScanInfo();
+    ScanInfo newScanInfo = new ScanInfo(oldScanInfo.getFamily(),
+        oldScanInfo.getMinVersions(), oldScanInfo.getMaxVersions(), 600,
+        oldScanInfo.getKeepDeletedCells(), oldScanInfo.getTimeToPurgeDeletes(),
+        oldScanInfo.getComparator());
+    store.setScanInfo(newScanInfo);
+    // Do not compact empty store file
+    List<StoreFile> candidates = sfCreate(0);
+    for (StoreFile file : candidates) {
+      if (file instanceof MockStoreFile) {
+        MockStoreFile mockFile = (MockStoreFile) file;
+        mockFile.setTimeRangeTracker(new TimeRangeTracker(-1, -1));
+        mockFile.setEntries(0);
+      }
+    }
+    // Test Default compactions
+    CompactionRequest result = ((RatioBasedCompactionPolicy) store.storeEngine
+        .getCompactionPolicy()).selectCompaction(candidates,
+        new ArrayList<StoreFile>(), false, false, false);
+    assertTrue(result.getFiles().size() == 0);
+    store.setScanInfo(oldScanInfo);
+  }
 }
-- 
1.7.0.4

